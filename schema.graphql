# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Activity {
  id: ID!
  name: String
  description: String
  descriptionActivities: Activity_descriptionActivities_Document
  address: String
  price: Decimal
  type_day: String
  is_available: Boolean
  reviewStar: Float
  includes(where: ActivityIncludeWhereInput! = {}, orderBy: [ActivityIncludeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityIncludeWhereUniqueInput): [ActivityInclude!]
  includesCount(where: ActivityIncludeWhereInput! = {}): Int
  whatToDo(where: ActivityWhatToDoWhereInput! = {}, orderBy: [ActivityWhatToDoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhatToDoWhereUniqueInput): [ActivityWhatToDo!]
  whatToDoCount(where: ActivityWhatToDoWhereInput! = {}): Int
  available: ActivityAvailable
  available_days(where: ActivityAvailableDayWhereInput! = {}, orderBy: [ActivityAvailableDayOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityAvailableDayWhereUniqueInput): [ActivityAvailableDay!]
  available_daysCount(where: ActivityAvailableDayWhereInput! = {}): Int
  lodging(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingCount(where: LodgingWhereInput! = {}): Int
  booking(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingCount(where: BookingWhereInput! = {}): Int
  review(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewCount(where: ReviewWhereInput! = {}): Int
  location(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationCount(where: LocationWhereInput! = {}): Int
  gallery(where: ActivityGalleryWhereInput! = {}, orderBy: [ActivityGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityGalleryWhereUniqueInput): [ActivityGallery!]
  galleryCount(where: ActivityGalleryWhereInput! = {}): Int
  payment(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentCount(where: PaymentWhereInput! = {}): Int
  link: String
  image: ImageFieldOutput
  hostBy: User
  createdAt: DateTime
}

type Activity_descriptionActivities_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar Decimal

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ActivityWhereUniqueInput {
  id: ID
  link: String
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  address: StringFilter
  price: DecimalNullableFilter
  type_day: StringFilter
  includes: ActivityIncludeManyRelationFilter
  whatToDo: ActivityWhatToDoManyRelationFilter
  available: ActivityAvailableWhereInput
  available_days: ActivityAvailableDayManyRelationFilter
  lodging: LodgingManyRelationFilter
  booking: BookingManyRelationFilter
  review: ReviewManyRelationFilter
  location: LocationManyRelationFilter
  gallery: ActivityGalleryManyRelationFilter
  payment: PaymentManyRelationFilter
  link: StringFilter
  hostBy: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input ActivityIncludeManyRelationFilter {
  every: ActivityIncludeWhereInput
  some: ActivityIncludeWhereInput
  none: ActivityIncludeWhereInput
}

input ActivityWhatToDoManyRelationFilter {
  every: ActivityWhatToDoWhereInput
  some: ActivityWhatToDoWhereInput
  none: ActivityWhatToDoWhereInput
}

input ActivityAvailableDayManyRelationFilter {
  every: ActivityAvailableDayWhereInput
  some: ActivityAvailableDayWhereInput
  none: ActivityAvailableDayWhereInput
}

input LodgingManyRelationFilter {
  every: LodgingWhereInput
  some: LodgingWhereInput
  none: LodgingWhereInput
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input ActivityGalleryManyRelationFilter {
  every: ActivityGalleryWhereInput
  some: ActivityGalleryWhereInput
  none: ActivityGalleryWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ActivityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  address: OrderDirection
  price: OrderDirection
  type_day: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActivityUpdateInput {
  name: String
  description: String
  descriptionActivities: JSON
  address: String
  price: Decimal
  type_day: String
  includes: ActivityIncludeRelateToManyForUpdateInput
  whatToDo: ActivityWhatToDoRelateToManyForUpdateInput
  available: ActivityAvailableRelateToOneForUpdateInput
  available_days: ActivityAvailableDayRelateToManyForUpdateInput
  lodging: LodgingRelateToManyForUpdateInput
  booking: BookingRelateToManyForUpdateInput
  review: ReviewRelateToManyForUpdateInput
  location: LocationRelateToManyForUpdateInput
  gallery: ActivityGalleryRelateToManyForUpdateInput
  payment: PaymentRelateToManyForUpdateInput
  link: String
  image: ImageFieldInput
  hostBy: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input ActivityIncludeRelateToManyForUpdateInput {
  disconnect: [ActivityIncludeWhereUniqueInput!]
  set: [ActivityIncludeWhereUniqueInput!]
  create: [ActivityIncludeCreateInput!]
  connect: [ActivityIncludeWhereUniqueInput!]
}

input ActivityWhatToDoRelateToManyForUpdateInput {
  disconnect: [ActivityWhatToDoWhereUniqueInput!]
  set: [ActivityWhatToDoWhereUniqueInput!]
  create: [ActivityWhatToDoCreateInput!]
  connect: [ActivityWhatToDoWhereUniqueInput!]
}

input ActivityAvailableRelateToOneForUpdateInput {
  create: ActivityAvailableCreateInput
  connect: ActivityAvailableWhereUniqueInput
  disconnect: Boolean
}

input ActivityAvailableDayRelateToManyForUpdateInput {
  disconnect: [ActivityAvailableDayWhereUniqueInput!]
  set: [ActivityAvailableDayWhereUniqueInput!]
  create: [ActivityAvailableDayCreateInput!]
  connect: [ActivityAvailableDayWhereUniqueInput!]
}

input LodgingRelateToManyForUpdateInput {
  disconnect: [LodgingWhereUniqueInput!]
  set: [LodgingWhereUniqueInput!]
  create: [LodgingCreateInput!]
  connect: [LodgingWhereUniqueInput!]
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input ActivityGalleryRelateToManyForUpdateInput {
  disconnect: [ActivityGalleryWhereUniqueInput!]
  set: [ActivityGalleryWhereUniqueInput!]
  create: [ActivityGalleryCreateInput!]
  connect: [ActivityGalleryWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ActivityUpdateArgs {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateInput!
}

input ActivityCreateInput {
  name: String
  description: String
  descriptionActivities: JSON
  address: String
  price: Decimal
  type_day: String
  includes: ActivityIncludeRelateToManyForCreateInput
  whatToDo: ActivityWhatToDoRelateToManyForCreateInput
  available: ActivityAvailableRelateToOneForCreateInput
  available_days: ActivityAvailableDayRelateToManyForCreateInput
  lodging: LodgingRelateToManyForCreateInput
  booking: BookingRelateToManyForCreateInput
  review: ReviewRelateToManyForCreateInput
  location: LocationRelateToManyForCreateInput
  gallery: ActivityGalleryRelateToManyForCreateInput
  payment: PaymentRelateToManyForCreateInput
  link: String
  image: ImageFieldInput
  hostBy: UserRelateToOneForCreateInput
  createdAt: DateTime
}

input ActivityIncludeRelateToManyForCreateInput {
  create: [ActivityIncludeCreateInput!]
  connect: [ActivityIncludeWhereUniqueInput!]
}

input ActivityWhatToDoRelateToManyForCreateInput {
  create: [ActivityWhatToDoCreateInput!]
  connect: [ActivityWhatToDoWhereUniqueInput!]
}

input ActivityAvailableRelateToOneForCreateInput {
  create: ActivityAvailableCreateInput
  connect: ActivityAvailableWhereUniqueInput
}

input ActivityAvailableDayRelateToManyForCreateInput {
  create: [ActivityAvailableDayCreateInput!]
  connect: [ActivityAvailableDayWhereUniqueInput!]
}

input LodgingRelateToManyForCreateInput {
  create: [LodgingCreateInput!]
  connect: [LodgingWhereUniqueInput!]
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input ActivityGalleryRelateToManyForCreateInput {
  create: [ActivityGalleryCreateInput!]
  connect: [ActivityGalleryWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ActivityGallery {
  id: ID!
  description: String
  image: ImageFieldOutput
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  createdAt: DateTime
}

input ActivityGalleryWhereUniqueInput {
  id: ID
}

input ActivityGalleryWhereInput {
  AND: [ActivityGalleryWhereInput!]
  OR: [ActivityGalleryWhereInput!]
  NOT: [ActivityGalleryWhereInput!]
  id: IDFilter
  description: StringFilter
  activity: ActivityManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ActivityManyRelationFilter {
  every: ActivityWhereInput
  some: ActivityWhereInput
  none: ActivityWhereInput
}

input ActivityGalleryOrderByInput {
  id: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input ActivityGalleryUpdateInput {
  description: String
  image: ImageFieldInput
  activity: ActivityRelateToManyForUpdateInput
  createdAt: DateTime
}

input ActivityRelateToManyForUpdateInput {
  disconnect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityGalleryUpdateArgs {
  where: ActivityGalleryWhereUniqueInput!
  data: ActivityGalleryUpdateInput!
}

input ActivityGalleryCreateInput {
  description: String
  image: ImageFieldInput
  activity: ActivityRelateToManyForCreateInput
  createdAt: DateTime
}

input ActivityRelateToManyForCreateInput {
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

type ActivityInclude {
  id: ID!
  name: String
  description: String
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  createdAt: DateTime
}

input ActivityIncludeWhereUniqueInput {
  id: ID
}

input ActivityIncludeWhereInput {
  AND: [ActivityIncludeWhereInput!]
  OR: [ActivityIncludeWhereInput!]
  NOT: [ActivityIncludeWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  activity: ActivityManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ActivityIncludeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input ActivityIncludeUpdateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForUpdateInput
  createdAt: DateTime
}

input ActivityIncludeUpdateArgs {
  where: ActivityIncludeWhereUniqueInput!
  data: ActivityIncludeUpdateInput!
}

input ActivityIncludeCreateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForCreateInput
  createdAt: DateTime
}

type ActivityWhatToDo {
  id: ID!
  name: String
  description: String
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  createdAt: DateTime
}

input ActivityWhatToDoWhereUniqueInput {
  id: ID
}

input ActivityWhatToDoWhereInput {
  AND: [ActivityWhatToDoWhereInput!]
  OR: [ActivityWhatToDoWhereInput!]
  NOT: [ActivityWhatToDoWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  activity: ActivityManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ActivityWhatToDoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input ActivityWhatToDoUpdateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForUpdateInput
  createdAt: DateTime
}

input ActivityWhatToDoUpdateArgs {
  where: ActivityWhatToDoWhereUniqueInput!
  data: ActivityWhatToDoUpdateInput!
}

input ActivityWhatToDoCreateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForCreateInput
  createdAt: DateTime
}

type ActivityAvailable {
  id: ID!
  start_date: CalendarDay
  end_date: CalendarDay
  specific_date: CalendarDay
  duration_days: String
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  activity: Activity
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ActivityAvailableWhereUniqueInput {
  id: ID
}

input ActivityAvailableWhereInput {
  AND: [ActivityAvailableWhereInput!]
  OR: [ActivityAvailableWhereInput!]
  NOT: [ActivityAvailableWhereInput!]
  id: IDFilter
  start_date: CalendarDayNullableFilter
  end_date: CalendarDayNullableFilter
  specific_date: CalendarDayNullableFilter
  monday: BooleanFilter
  tuesday: BooleanFilter
  wednesday: BooleanFilter
  thursday: BooleanFilter
  friday: BooleanFilter
  saturday: BooleanFilter
  sunday: BooleanFilter
  activity: ActivityWhereInput
  createdAt: DateTimeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ActivityAvailableOrderByInput {
  id: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  specific_date: OrderDirection
  monday: OrderDirection
  tuesday: OrderDirection
  wednesday: OrderDirection
  thursday: OrderDirection
  friday: OrderDirection
  saturday: OrderDirection
  sunday: OrderDirection
  createdAt: OrderDirection
}

input ActivityAvailableUpdateInput {
  start_date: CalendarDay
  end_date: CalendarDay
  specific_date: CalendarDay
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  activity: ActivityRelateToOneForUpdateInput
  createdAt: DateTime
}

input ActivityRelateToOneForUpdateInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
  disconnect: Boolean
}

input ActivityAvailableUpdateArgs {
  where: ActivityAvailableWhereUniqueInput!
  data: ActivityAvailableUpdateInput!
}

input ActivityAvailableCreateInput {
  start_date: CalendarDay
  end_date: CalendarDay
  specific_date: CalendarDay
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
  activity: ActivityRelateToOneForCreateInput
  createdAt: DateTime
}

input ActivityRelateToOneForCreateInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
}

type ActivityAvailableDay {
  id: ID!
  day: CalendarDay
  activity: Activity
  createdAt: DateTime
}

input ActivityAvailableDayWhereUniqueInput {
  id: ID
}

input ActivityAvailableDayWhereInput {
  AND: [ActivityAvailableDayWhereInput!]
  OR: [ActivityAvailableDayWhereInput!]
  NOT: [ActivityAvailableDayWhereInput!]
  id: IDFilter
  day: CalendarDayNullableFilter
  activity: ActivityWhereInput
  createdAt: DateTimeNullableFilter
}

input ActivityAvailableDayOrderByInput {
  id: OrderDirection
  day: OrderDirection
  createdAt: OrderDirection
}

input ActivityAvailableDayUpdateInput {
  day: CalendarDay
  activity: ActivityRelateToOneForUpdateInput
  createdAt: DateTime
}

input ActivityAvailableDayUpdateArgs {
  where: ActivityAvailableDayWhereUniqueInput!
  data: ActivityAvailableDayUpdateInput!
}

input ActivityAvailableDayCreateInput {
  day: CalendarDay
  activity: ActivityRelateToOneForCreateInput
  createdAt: DateTime
}

type Booking {
  id: ID!
  start_date: CalendarDay
  end_date: CalendarDay
  guests_adults: Int
  guests_childs: Int
  guestss: String
  code: String
  status: BookingStatusType
  activity: Activity
  lodging: Lodging
  user: User
  payment: Payment
  createdAt: DateTime
}

enum BookingStatusType {
  pending
  paid
  cancelled
  confirmed
  completed
}

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  start_date: CalendarDayNullableFilter
  end_date: CalendarDayNullableFilter
  guests_adults: IntNullableFilter
  guests_childs: IntNullableFilter
  status: BookingStatusTypeNullableFilter
  activity: ActivityWhereInput
  lodging: LodgingWhereInput
  user: UserWhereInput
  payment: PaymentWhereInput
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BookingStatusTypeNullableFilter {
  equals: BookingStatusType
  in: [BookingStatusType!]
  notIn: [BookingStatusType!]
  not: BookingStatusTypeNullableFilter
}

input BookingOrderByInput {
  id: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  guests_adults: OrderDirection
  guests_childs: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input BookingUpdateInput {
  start_date: CalendarDay
  end_date: CalendarDay
  guests_adults: Int
  guests_childs: Int
  status: BookingStatusType
  activity: ActivityRelateToOneForUpdateInput
  lodging: LodgingRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  payment: PaymentRelateToOneForUpdateInput
  createdAt: DateTime
}

input LodgingRelateToOneForUpdateInput {
  create: LodgingCreateInput
  connect: LodgingWhereUniqueInput
  disconnect: Boolean
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  start_date: CalendarDay
  end_date: CalendarDay
  guests_adults: Int
  guests_childs: Int
  status: BookingStatusType
  activity: ActivityRelateToOneForCreateInput
  lodging: LodgingRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  payment: PaymentRelateToOneForCreateInput
  createdAt: DateTime
}

input LodgingRelateToOneForCreateInput {
  create: LodgingCreateInput
  connect: LodgingWhereUniqueInput
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

type Location {
  id: ID!
  name: String
  description: String
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  lodging(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingCount(where: LodgingWhereInput! = {}): Int
  image: ImageFieldOutput
  link: String
  gallery(where: LocationGalleryWhereInput! = {}, orderBy: [LocationGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationGalleryWhereUniqueInput): [LocationGallery!]
  galleryCount(where: LocationGalleryWhereInput! = {}): Int
  createdAt: DateTime
}

input LocationWhereUniqueInput {
  id: ID
  link: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  activity: ActivityManyRelationFilter
  lodging: LodgingManyRelationFilter
  link: StringFilter
  gallery: LocationGalleryManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input LocationGalleryManyRelationFilter {
  every: LocationGalleryWhereInput
  some: LocationGalleryWhereInput
  none: LocationGalleryWhereInput
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
}

input LocationUpdateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForUpdateInput
  lodging: LodgingRelateToManyForUpdateInput
  image: ImageFieldInput
  link: String
  gallery: LocationGalleryRelateToManyForUpdateInput
  createdAt: DateTime
}

input LocationGalleryRelateToManyForUpdateInput {
  disconnect: [LocationGalleryWhereUniqueInput!]
  set: [LocationGalleryWhereUniqueInput!]
  create: [LocationGalleryCreateInput!]
  connect: [LocationGalleryWhereUniqueInput!]
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  description: String
  activity: ActivityRelateToManyForCreateInput
  lodging: LodgingRelateToManyForCreateInput
  image: ImageFieldInput
  link: String
  gallery: LocationGalleryRelateToManyForCreateInput
  createdAt: DateTime
}

input LocationGalleryRelateToManyForCreateInput {
  create: [LocationGalleryCreateInput!]
  connect: [LocationGalleryWhereUniqueInput!]
}

type LocationGallery {
  id: ID!
  description: String
  image: ImageFieldOutput
  location(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationCount(where: LocationWhereInput! = {}): Int
  createdAt: DateTime
}

input LocationGalleryWhereUniqueInput {
  id: ID
}

input LocationGalleryWhereInput {
  AND: [LocationGalleryWhereInput!]
  OR: [LocationGalleryWhereInput!]
  NOT: [LocationGalleryWhereInput!]
  id: IDFilter
  description: StringFilter
  location: LocationManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input LocationGalleryOrderByInput {
  id: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input LocationGalleryUpdateInput {
  description: String
  image: ImageFieldInput
  location: LocationRelateToManyForUpdateInput
  createdAt: DateTime
}

input LocationGalleryUpdateArgs {
  where: LocationGalleryWhereUniqueInput!
  data: LocationGalleryUpdateInput!
}

input LocationGalleryCreateInput {
  description: String
  image: ImageFieldInput
  location: LocationRelateToManyForCreateInput
  createdAt: DateTime
}

type Lodging {
  id: ID!
  name: String
  description: String
  price: Decimal
  status: String
  type: String
  address: String
  lat: String
  lng: String
  hostBy: User
  lodgingType(where: LodgingTypeWhereInput! = {}, orderBy: [LodgingTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingTypeWhereUniqueInput): [LodgingType!]
  lodgingTypeCount(where: LodgingTypeWhereInput! = {}): Int
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  payment(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentCount(where: PaymentWhereInput! = {}): Int
  booking(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingCount(where: BookingWhereInput! = {}): Int
  reviewStar: Float
  review(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewCount(where: ReviewWhereInput! = {}): Int
  location(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationCount(where: LocationWhereInput! = {}): Int
  link: String
  gallery(where: LodgingGalleryWhereInput! = {}, orderBy: [LodgingGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingGalleryWhereUniqueInput): [LodgingGallery!]
  galleryCount(where: LodgingGalleryWhereInput! = {}): Int
  includes(where: LodgingIncludeWhereInput! = {}, orderBy: [LodgingIncludeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingIncludeWhereUniqueInput): [LodgingInclude!]
  includesCount(where: LodgingIncludeWhereInput! = {}): Int
  logo: ImageFieldOutput
  createdAt: DateTime
}

input LodgingWhereUniqueInput {
  id: ID
  link: String
}

input LodgingWhereInput {
  AND: [LodgingWhereInput!]
  OR: [LodgingWhereInput!]
  NOT: [LodgingWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: DecimalNullableFilter
  status: StringFilter
  type: StringFilter
  address: StringFilter
  lat: StringFilter
  lng: StringFilter
  hostBy: UserWhereInput
  lodgingType: LodgingTypeManyRelationFilter
  activity: ActivityManyRelationFilter
  payment: PaymentManyRelationFilter
  booking: BookingManyRelationFilter
  review: ReviewManyRelationFilter
  location: LocationManyRelationFilter
  link: StringFilter
  gallery: LodgingGalleryManyRelationFilter
  includes: LodgingIncludeManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input LodgingTypeManyRelationFilter {
  every: LodgingTypeWhereInput
  some: LodgingTypeWhereInput
  none: LodgingTypeWhereInput
}

input LodgingGalleryManyRelationFilter {
  every: LodgingGalleryWhereInput
  some: LodgingGalleryWhereInput
  none: LodgingGalleryWhereInput
}

input LodgingIncludeManyRelationFilter {
  every: LodgingIncludeWhereInput
  some: LodgingIncludeWhereInput
  none: LodgingIncludeWhereInput
}

input LodgingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  status: OrderDirection
  type: OrderDirection
  address: OrderDirection
  lat: OrderDirection
  lng: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
}

input LodgingUpdateInput {
  name: String
  description: String
  price: Decimal
  status: String
  type: String
  address: String
  lat: String
  lng: String
  hostBy: UserRelateToOneForUpdateInput
  lodgingType: LodgingTypeRelateToManyForUpdateInput
  activity: ActivityRelateToManyForUpdateInput
  payment: PaymentRelateToManyForUpdateInput
  booking: BookingRelateToManyForUpdateInput
  review: ReviewRelateToManyForUpdateInput
  location: LocationRelateToManyForUpdateInput
  link: String
  gallery: LodgingGalleryRelateToManyForUpdateInput
  includes: LodgingIncludeRelateToManyForUpdateInput
  logo: ImageFieldInput
  createdAt: DateTime
}

input LodgingTypeRelateToManyForUpdateInput {
  disconnect: [LodgingTypeWhereUniqueInput!]
  set: [LodgingTypeWhereUniqueInput!]
  create: [LodgingTypeCreateInput!]
  connect: [LodgingTypeWhereUniqueInput!]
}

input LodgingGalleryRelateToManyForUpdateInput {
  disconnect: [LodgingGalleryWhereUniqueInput!]
  set: [LodgingGalleryWhereUniqueInput!]
  create: [LodgingGalleryCreateInput!]
  connect: [LodgingGalleryWhereUniqueInput!]
}

input LodgingIncludeRelateToManyForUpdateInput {
  disconnect: [LodgingIncludeWhereUniqueInput!]
  set: [LodgingIncludeWhereUniqueInput!]
  create: [LodgingIncludeCreateInput!]
  connect: [LodgingIncludeWhereUniqueInput!]
}

input LodgingUpdateArgs {
  where: LodgingWhereUniqueInput!
  data: LodgingUpdateInput!
}

input LodgingCreateInput {
  name: String
  description: String
  price: Decimal
  status: String
  type: String
  address: String
  lat: String
  lng: String
  hostBy: UserRelateToOneForCreateInput
  lodgingType: LodgingTypeRelateToManyForCreateInput
  activity: ActivityRelateToManyForCreateInput
  payment: PaymentRelateToManyForCreateInput
  booking: BookingRelateToManyForCreateInput
  review: ReviewRelateToManyForCreateInput
  location: LocationRelateToManyForCreateInput
  link: String
  gallery: LodgingGalleryRelateToManyForCreateInput
  includes: LodgingIncludeRelateToManyForCreateInput
  logo: ImageFieldInput
  createdAt: DateTime
}

input LodgingTypeRelateToManyForCreateInput {
  create: [LodgingTypeCreateInput!]
  connect: [LodgingTypeWhereUniqueInput!]
}

input LodgingGalleryRelateToManyForCreateInput {
  create: [LodgingGalleryCreateInput!]
  connect: [LodgingGalleryWhereUniqueInput!]
}

input LodgingIncludeRelateToManyForCreateInput {
  create: [LodgingIncludeCreateInput!]
  connect: [LodgingIncludeWhereUniqueInput!]
}

type LodgingType {
  id: ID!
  type: String
  description: String
  max_person_capacity: Int
  lodging: Lodging
  createdAt: DateTime
}

input LodgingTypeWhereUniqueInput {
  id: ID
}

input LodgingTypeWhereInput {
  AND: [LodgingTypeWhereInput!]
  OR: [LodgingTypeWhereInput!]
  NOT: [LodgingTypeWhereInput!]
  id: IDFilter
  type: StringFilter
  description: StringFilter
  max_person_capacity: IntNullableFilter
  lodging: LodgingWhereInput
  createdAt: DateTimeNullableFilter
}

input LodgingTypeOrderByInput {
  id: OrderDirection
  type: OrderDirection
  description: OrderDirection
  max_person_capacity: OrderDirection
  createdAt: OrderDirection
}

input LodgingTypeUpdateInput {
  type: String
  description: String
  max_person_capacity: Int
  lodging: LodgingRelateToOneForUpdateInput
  createdAt: DateTime
}

input LodgingTypeUpdateArgs {
  where: LodgingTypeWhereUniqueInput!
  data: LodgingTypeUpdateInput!
}

input LodgingTypeCreateInput {
  type: String
  description: String
  max_person_capacity: Int
  lodging: LodgingRelateToOneForCreateInput
  createdAt: DateTime
}

type LodgingGallery {
  id: ID!
  description: String
  image: ImageFieldOutput
  lodging(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingCount(where: LodgingWhereInput! = {}): Int
  createdAt: DateTime
}

input LodgingGalleryWhereUniqueInput {
  id: ID
}

input LodgingGalleryWhereInput {
  AND: [LodgingGalleryWhereInput!]
  OR: [LodgingGalleryWhereInput!]
  NOT: [LodgingGalleryWhereInput!]
  id: IDFilter
  description: StringFilter
  lodging: LodgingManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input LodgingGalleryOrderByInput {
  id: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input LodgingGalleryUpdateInput {
  description: String
  image: ImageFieldInput
  lodging: LodgingRelateToManyForUpdateInput
  createdAt: DateTime
}

input LodgingGalleryUpdateArgs {
  where: LodgingGalleryWhereUniqueInput!
  data: LodgingGalleryUpdateInput!
}

input LodgingGalleryCreateInput {
  description: String
  image: ImageFieldInput
  lodging: LodgingRelateToManyForCreateInput
  createdAt: DateTime
}

type LodgingInclude {
  id: ID!
  name: String
  description: String
  lodging(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingCount(where: LodgingWhereInput! = {}): Int
  createdAt: DateTime
}

input LodgingIncludeWhereUniqueInput {
  id: ID
}

input LodgingIncludeWhereInput {
  AND: [LodgingIncludeWhereInput!]
  OR: [LodgingIncludeWhereInput!]
  NOT: [LodgingIncludeWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  lodging: LodgingManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input LodgingIncludeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input LodgingIncludeUpdateInput {
  name: String
  description: String
  lodging: LodgingRelateToManyForUpdateInput
  createdAt: DateTime
}

input LodgingIncludeUpdateArgs {
  where: LodgingIncludeWhereUniqueInput!
  data: LodgingIncludeUpdateInput!
}

input LodgingIncludeCreateInput {
  name: String
  description: String
  lodging: LodgingRelateToManyForCreateInput
  createdAt: DateTime
}

type Payment {
  id: ID!
  amount: Decimal
  status: PaymentStatusType
  processorStripeChargeId: String
  stripeErrorMessage: String
  processorRefundId: String
  notes: String
  activity: Activity
  lodging: Lodging
  user: User
  booking: Booking
  paymentMethod: PaymentMethod
  createdAt: DateTime
}

enum PaymentStatusType {
  pending
  processing
  succeeded
  cancelled
  failed
  refunded
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  status: PaymentStatusTypeNullableFilter
  processorStripeChargeId: StringFilter
  stripeErrorMessage: StringFilter
  processorRefundId: StringFilter
  notes: StringFilter
  activity: ActivityWhereInput
  lodging: LodgingWhereInput
  user: UserWhereInput
  booking: BookingWhereInput
  paymentMethod: PaymentMethodWhereInput
  createdAt: DateTimeNullableFilter
}

input PaymentStatusTypeNullableFilter {
  equals: PaymentStatusType
  in: [PaymentStatusType!]
  notIn: [PaymentStatusType!]
  not: PaymentStatusTypeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  processorStripeChargeId: OrderDirection
  stripeErrorMessage: OrderDirection
  processorRefundId: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input PaymentUpdateInput {
  amount: Decimal
  status: PaymentStatusType
  processorStripeChargeId: String
  stripeErrorMessage: String
  processorRefundId: String
  notes: String
  activity: ActivityRelateToOneForUpdateInput
  lodging: LodgingRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  booking: BookingRelateToOneForUpdateInput
  paymentMethod: PaymentMethodRelateToOneForUpdateInput
  createdAt: DateTime
}

input BookingRelateToOneForUpdateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
}

input PaymentMethodRelateToOneForUpdateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Decimal
  status: PaymentStatusType
  processorStripeChargeId: String
  stripeErrorMessage: String
  processorRefundId: String
  notes: String
  activity: ActivityRelateToOneForCreateInput
  lodging: LodgingRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  booking: BookingRelateToOneForCreateInput
  paymentMethod: PaymentMethodRelateToOneForCreateInput
  createdAt: DateTime
}

input BookingRelateToOneForCreateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

input PaymentMethodRelateToOneForCreateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
}

type PaymentMethod {
  id: ID!
  cardType: String
  isDefault: Boolean
  lastFourDigits: String
  expMonth: String
  expYear: String
  stripeProcessorId: String
  stripePaymentMethodId: String
  address: String
  postalCode: String
  ownerName: String
  country: String
  payment(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentCount(where: PaymentWhereInput! = {}): Int
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentMethodWhereUniqueInput {
  id: ID
  stripePaymentMethodId: String
}

input PaymentMethodWhereInput {
  AND: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  NOT: [PaymentMethodWhereInput!]
  id: IDFilter
  cardType: StringFilter
  isDefault: BooleanFilter
  lastFourDigits: StringFilter
  expMonth: StringFilter
  expYear: StringFilter
  stripeProcessorId: StringFilter
  stripePaymentMethodId: StringFilter
  address: StringFilter
  postalCode: StringFilter
  ownerName: StringFilter
  country: StringFilter
  payment: PaymentManyRelationFilter
  user: UserManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PaymentMethodOrderByInput {
  id: OrderDirection
  cardType: OrderDirection
  isDefault: OrderDirection
  lastFourDigits: OrderDirection
  expMonth: OrderDirection
  expYear: OrderDirection
  stripeProcessorId: OrderDirection
  stripePaymentMethodId: OrderDirection
  address: OrderDirection
  postalCode: OrderDirection
  ownerName: OrderDirection
  country: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentMethodUpdateInput {
  cardType: String
  isDefault: Boolean
  lastFourDigits: String
  expMonth: String
  expYear: String
  stripeProcessorId: String
  stripePaymentMethodId: String
  address: String
  postalCode: String
  ownerName: String
  country: String
  payment: PaymentRelateToManyForUpdateInput
  user: UserRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PaymentMethodUpdateArgs {
  where: PaymentMethodWhereUniqueInput!
  data: PaymentMethodUpdateInput!
}

input PaymentMethodCreateInput {
  cardType: String
  isDefault: Boolean
  lastFourDigits: String
  expMonth: String
  expYear: String
  stripeProcessorId: String
  stripePaymentMethodId: String
  address: String
  postalCode: String
  ownerName: String
  country: String
  payment: PaymentRelateToManyForCreateInput
  user: UserRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Review {
  id: ID!
  review: String
  rating: Int
  activity: Activity
  lodging: Lodging
  user: User
  createdAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  review: StringFilter
  rating: IntNullableFilter
  activity: ActivityWhereInput
  lodging: LodgingWhereInput
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  review: OrderDirection
  rating: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  review: String
  rating: Int
  activity: ActivityRelateToOneForUpdateInput
  lodging: LodgingRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  review: String
  rating: Int
  activity: ActivityRelateToOneForCreateInput
  lodging: LodgingRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
}

type Role {
  id: ID!
  name: String
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input RoleUpdateInput {
  name: String
  user: UserRelateToManyForUpdateInput
  createdAt: DateTime
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  user: UserRelateToManyForCreateInput
  createdAt: DateTime
}

type User {
  id: ID!
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: PasswordState
  countryCode: String
  phone: String
  description: String
  instagram: String
  stripeCustomerId: String
  role(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  roleCount(where: RoleWhereInput! = {}): Int
  lodging(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingCount(where: LodgingWhereInput! = {}): Int
  booking(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingCount(where: BookingWhereInput! = {}): Int
  reviewStar: Float
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  link: String
  status: UserStatusType
  activity(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  payment(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentCount(where: PaymentWhereInput! = {}): Int
  paymentMethod(where: PaymentMethodWhereInput! = {}, orderBy: [PaymentMethodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentMethodWhereUniqueInput): [PaymentMethod!]
  paymentMethodCount(where: PaymentMethodWhereInput! = {}): Int
  verified: Boolean
  image: ImageFieldOutput
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserStatusType {
  initial
  registration_done
  verified
}

input UserWhereUniqueInput {
  id: ID
  email: String
  link: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  secondLastName: StringFilter
  email: StringFilter
  countryCode: StringFilter
  phone: StringFilter
  description: StringFilter
  instagram: StringFilter
  stripeCustomerId: StringFilter
  role: RoleManyRelationFilter
  lodging: LodgingManyRelationFilter
  booking: BookingManyRelationFilter
  reviews: ReviewManyRelationFilter
  link: StringFilter
  status: UserStatusTypeNullableFilter
  activity: ActivityManyRelationFilter
  payment: PaymentManyRelationFilter
  paymentMethod: PaymentMethodManyRelationFilter
  verified: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input PaymentMethodManyRelationFilter {
  every: PaymentMethodWhereInput
  some: PaymentMethodWhereInput
  none: PaymentMethodWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  secondLastName: OrderDirection
  email: OrderDirection
  countryCode: OrderDirection
  phone: OrderDirection
  description: OrderDirection
  instagram: OrderDirection
  stripeCustomerId: OrderDirection
  link: OrderDirection
  status: OrderDirection
  verified: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: String
  countryCode: String
  phone: String
  description: String
  instagram: String
  stripeCustomerId: String
  role: RoleRelateToManyForUpdateInput
  lodging: LodgingRelateToManyForUpdateInput
  booking: BookingRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  link: String
  status: UserStatusType
  activity: ActivityRelateToManyForUpdateInput
  payment: PaymentRelateToManyForUpdateInput
  paymentMethod: PaymentMethodRelateToManyForUpdateInput
  verified: Boolean
  image: ImageFieldInput
  createdAt: DateTime
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input PaymentMethodRelateToManyForUpdateInput {
  disconnect: [PaymentMethodWhereUniqueInput!]
  set: [PaymentMethodWhereUniqueInput!]
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: String
  countryCode: String
  phone: String
  description: String
  instagram: String
  stripeCustomerId: String
  role: RoleRelateToManyForCreateInput
  lodging: LodgingRelateToManyForCreateInput
  booking: BookingRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  link: String
  status: UserStatusType
  activity: ActivityRelateToManyForCreateInput
  payment: PaymentRelateToManyForCreateInput
  paymentMethod: PaymentMethodRelateToManyForCreateInput
  verified: Boolean
  image: ImageFieldInput
  createdAt: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input PaymentMethodRelateToManyForCreateInput {
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity
  createActivities(data: [ActivityCreateInput!]!): [Activity]
  updateActivity(where: ActivityWhereUniqueInput!, data: ActivityUpdateInput!): Activity
  updateActivities(data: [ActivityUpdateArgs!]!): [Activity]
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteActivities(where: [ActivityWhereUniqueInput!]!): [Activity]
  createActivityGallery(data: ActivityGalleryCreateInput!): ActivityGallery
  createActivityGalleries(data: [ActivityGalleryCreateInput!]!): [ActivityGallery]
  updateActivityGallery(where: ActivityGalleryWhereUniqueInput!, data: ActivityGalleryUpdateInput!): ActivityGallery
  updateActivityGalleries(data: [ActivityGalleryUpdateArgs!]!): [ActivityGallery]
  deleteActivityGallery(where: ActivityGalleryWhereUniqueInput!): ActivityGallery
  deleteActivityGalleries(where: [ActivityGalleryWhereUniqueInput!]!): [ActivityGallery]
  createActivityInclude(data: ActivityIncludeCreateInput!): ActivityInclude
  createActivityIncludes(data: [ActivityIncludeCreateInput!]!): [ActivityInclude]
  updateActivityInclude(where: ActivityIncludeWhereUniqueInput!, data: ActivityIncludeUpdateInput!): ActivityInclude
  updateActivityIncludes(data: [ActivityIncludeUpdateArgs!]!): [ActivityInclude]
  deleteActivityInclude(where: ActivityIncludeWhereUniqueInput!): ActivityInclude
  deleteActivityIncludes(where: [ActivityIncludeWhereUniqueInput!]!): [ActivityInclude]
  createActivityWhatToDo(data: ActivityWhatToDoCreateInput!): ActivityWhatToDo
  createActivityWhatToDos(data: [ActivityWhatToDoCreateInput!]!): [ActivityWhatToDo]
  updateActivityWhatToDo(where: ActivityWhatToDoWhereUniqueInput!, data: ActivityWhatToDoUpdateInput!): ActivityWhatToDo
  updateActivityWhatToDos(data: [ActivityWhatToDoUpdateArgs!]!): [ActivityWhatToDo]
  deleteActivityWhatToDo(where: ActivityWhatToDoWhereUniqueInput!): ActivityWhatToDo
  deleteActivityWhatToDos(where: [ActivityWhatToDoWhereUniqueInput!]!): [ActivityWhatToDo]
  createActivityAvailable(data: ActivityAvailableCreateInput!): ActivityAvailable
  createActivityAvailables(data: [ActivityAvailableCreateInput!]!): [ActivityAvailable]
  updateActivityAvailable(where: ActivityAvailableWhereUniqueInput!, data: ActivityAvailableUpdateInput!): ActivityAvailable
  updateActivityAvailables(data: [ActivityAvailableUpdateArgs!]!): [ActivityAvailable]
  deleteActivityAvailable(where: ActivityAvailableWhereUniqueInput!): ActivityAvailable
  deleteActivityAvailables(where: [ActivityAvailableWhereUniqueInput!]!): [ActivityAvailable]
  createActivityAvailableDay(data: ActivityAvailableDayCreateInput!): ActivityAvailableDay
  createActivityAvailableDays(data: [ActivityAvailableDayCreateInput!]!): [ActivityAvailableDay]
  updateActivityAvailableDay(where: ActivityAvailableDayWhereUniqueInput!, data: ActivityAvailableDayUpdateInput!): ActivityAvailableDay
  updateActivityAvailableDays(data: [ActivityAvailableDayUpdateArgs!]!): [ActivityAvailableDay]
  deleteActivityAvailableDay(where: ActivityAvailableDayWhereUniqueInput!): ActivityAvailableDay
  deleteActivityAvailableDays(where: [ActivityAvailableDayWhereUniqueInput!]!): [ActivityAvailableDay]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(where: BookingWhereUniqueInput!, data: BookingUpdateInput!): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createLocationGallery(data: LocationGalleryCreateInput!): LocationGallery
  createLocationGalleries(data: [LocationGalleryCreateInput!]!): [LocationGallery]
  updateLocationGallery(where: LocationGalleryWhereUniqueInput!, data: LocationGalleryUpdateInput!): LocationGallery
  updateLocationGalleries(data: [LocationGalleryUpdateArgs!]!): [LocationGallery]
  deleteLocationGallery(where: LocationGalleryWhereUniqueInput!): LocationGallery
  deleteLocationGalleries(where: [LocationGalleryWhereUniqueInput!]!): [LocationGallery]
  createLodging(data: LodgingCreateInput!): Lodging
  createLodgings(data: [LodgingCreateInput!]!): [Lodging]
  updateLodging(where: LodgingWhereUniqueInput!, data: LodgingUpdateInput!): Lodging
  updateLodgings(data: [LodgingUpdateArgs!]!): [Lodging]
  deleteLodging(where: LodgingWhereUniqueInput!): Lodging
  deleteLodgings(where: [LodgingWhereUniqueInput!]!): [Lodging]
  createLodgingType(data: LodgingTypeCreateInput!): LodgingType
  createLodgingTypes(data: [LodgingTypeCreateInput!]!): [LodgingType]
  updateLodgingType(where: LodgingTypeWhereUniqueInput!, data: LodgingTypeUpdateInput!): LodgingType
  updateLodgingTypes(data: [LodgingTypeUpdateArgs!]!): [LodgingType]
  deleteLodgingType(where: LodgingTypeWhereUniqueInput!): LodgingType
  deleteLodgingTypes(where: [LodgingTypeWhereUniqueInput!]!): [LodgingType]
  createLodgingGallery(data: LodgingGalleryCreateInput!): LodgingGallery
  createLodgingGalleries(data: [LodgingGalleryCreateInput!]!): [LodgingGallery]
  updateLodgingGallery(where: LodgingGalleryWhereUniqueInput!, data: LodgingGalleryUpdateInput!): LodgingGallery
  updateLodgingGalleries(data: [LodgingGalleryUpdateArgs!]!): [LodgingGallery]
  deleteLodgingGallery(where: LodgingGalleryWhereUniqueInput!): LodgingGallery
  deleteLodgingGalleries(where: [LodgingGalleryWhereUniqueInput!]!): [LodgingGallery]
  createLodgingInclude(data: LodgingIncludeCreateInput!): LodgingInclude
  createLodgingIncludes(data: [LodgingIncludeCreateInput!]!): [LodgingInclude]
  updateLodgingInclude(where: LodgingIncludeWhereUniqueInput!, data: LodgingIncludeUpdateInput!): LodgingInclude
  updateLodgingIncludes(data: [LodgingIncludeUpdateArgs!]!): [LodgingInclude]
  deleteLodgingInclude(where: LodgingIncludeWhereUniqueInput!): LodgingInclude
  deleteLodgingIncludes(where: [LodgingIncludeWhereUniqueInput!]!): [LodgingInclude]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod
  createPaymentMethods(data: [PaymentMethodCreateInput!]!): [PaymentMethod]
  updatePaymentMethod(where: PaymentMethodWhereUniqueInput!, data: PaymentMethodUpdateInput!): PaymentMethod
  updatePaymentMethods(data: [PaymentMethodUpdateArgs!]!): [PaymentMethod]
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deletePaymentMethods(where: [PaymentMethodWhereUniqueInput!]!): [PaymentMethod]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  makePayment(lodgingId: String, activityId: String!, startDate: CalendarDay!, endDate: CalendarDay!, guestss: String!, nameCard: String!, email: String!, notes: String!, paymentMethodId: String!, total: String!, noDuplicatePaymentMethod: Boolean!): makePaymentType
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  lastName: String
  email: String
  password: String
  role: RoleRelateToManyForCreateInput
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhereUniqueInput): [Activity!]
  activitiesCount(where: ActivityWhereInput! = {}): Int
  activityGallery(where: ActivityGalleryWhereUniqueInput!): ActivityGallery
  activityGalleries(where: ActivityGalleryWhereInput! = {}, orderBy: [ActivityGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityGalleryWhereUniqueInput): [ActivityGallery!]
  activityGalleriesCount(where: ActivityGalleryWhereInput! = {}): Int
  activityInclude(where: ActivityIncludeWhereUniqueInput!): ActivityInclude
  activityIncludes(where: ActivityIncludeWhereInput! = {}, orderBy: [ActivityIncludeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityIncludeWhereUniqueInput): [ActivityInclude!]
  activityIncludesCount(where: ActivityIncludeWhereInput! = {}): Int
  activityWhatToDo(where: ActivityWhatToDoWhereUniqueInput!): ActivityWhatToDo
  activityWhatToDos(where: ActivityWhatToDoWhereInput! = {}, orderBy: [ActivityWhatToDoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityWhatToDoWhereUniqueInput): [ActivityWhatToDo!]
  activityWhatToDosCount(where: ActivityWhatToDoWhereInput! = {}): Int
  activityAvailable(where: ActivityAvailableWhereUniqueInput!): ActivityAvailable
  activityAvailables(where: ActivityAvailableWhereInput! = {}, orderBy: [ActivityAvailableOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityAvailableWhereUniqueInput): [ActivityAvailable!]
  activityAvailablesCount(where: ActivityAvailableWhereInput! = {}): Int
  activityAvailableDay(where: ActivityAvailableDayWhereUniqueInput!): ActivityAvailableDay
  activityAvailableDays(where: ActivityAvailableDayWhereInput! = {}, orderBy: [ActivityAvailableDayOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityAvailableDayWhereUniqueInput): [ActivityAvailableDay!]
  activityAvailableDaysCount(where: ActivityAvailableDayWhereInput! = {}): Int
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  locationGallery(where: LocationGalleryWhereUniqueInput!): LocationGallery
  locationGalleries(where: LocationGalleryWhereInput! = {}, orderBy: [LocationGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationGalleryWhereUniqueInput): [LocationGallery!]
  locationGalleriesCount(where: LocationGalleryWhereInput! = {}): Int
  lodging(where: LodgingWhereUniqueInput!): Lodging
  lodgings(where: LodgingWhereInput! = {}, orderBy: [LodgingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingWhereUniqueInput): [Lodging!]
  lodgingsCount(where: LodgingWhereInput! = {}): Int
  lodgingType(where: LodgingTypeWhereUniqueInput!): LodgingType
  lodgingTypes(where: LodgingTypeWhereInput! = {}, orderBy: [LodgingTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingTypeWhereUniqueInput): [LodgingType!]
  lodgingTypesCount(where: LodgingTypeWhereInput! = {}): Int
  lodgingGallery(where: LodgingGalleryWhereUniqueInput!): LodgingGallery
  lodgingGalleries(where: LodgingGalleryWhereInput! = {}, orderBy: [LodgingGalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingGalleryWhereUniqueInput): [LodgingGallery!]
  lodgingGalleriesCount(where: LodgingGalleryWhereInput! = {}): Int
  lodgingInclude(where: LodgingIncludeWhereUniqueInput!): LodgingInclude
  lodgingIncludes(where: LodgingIncludeWhereInput! = {}, orderBy: [LodgingIncludeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LodgingIncludeWhereUniqueInput): [LodgingInclude!]
  lodgingIncludesCount(where: LodgingIncludeWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethods(where: PaymentMethodWhereInput! = {}, orderBy: [PaymentMethodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentMethodWhereUniqueInput): [PaymentMethod!]
  paymentMethodsCount(where: PaymentMethodWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  SetUpIntentStripe(email: String!): SetUpIntentStripeType
  StripePaymentMethods(email: String!): StripePaymentMethodsType
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type SetUpIntentData {
  setupIntent: String
  ephemeralKey: String
  customerId: String
  email: String
}

type SetUpIntentStripeType {
  message: String
  success: Boolean
  data: SetUpIntentData
}

type StripeCard {
  brand: String
  country: String
  exp_month: Int
  exp_year: Int
  last4: String
}

type StripePaymentMethod {
  id: String
  object: String
  customer: String
  type: String
  card: StripeCard
  created: Int
  livemode: Boolean
  metadata: JSON
}

type StripePaymentMethodsData {
  data: [StripePaymentMethod]
}

type StripePaymentMethodsType {
  message: String
  success: Boolean
  data: StripePaymentMethodsData
}

type makePaymentType {
  message: String
  success: Boolean
  data: JSON
}
