// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Activity {
  id                    String                 @id @default(cuid())
  name                  String                 @default("")
  description           String                 @default("")
  descriptionActivities Json                   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  address               String                 @default("")
  price                 Decimal?               @postgresql.Decimal(18, 4)
  type_day              String
  includes              ActivityInclude[]      @relation("Activity_includes")
  whatToDo              ActivityWhatToDo[]     @relation("Activity_whatToDo")
  available             ActivityAvailable?     @relation("Activity_available", fields: [availableId], references: [id])
  availableId           String?                @unique @map("available")
  available_days        ActivityAvailableDay[] @relation("ActivityAvailableDay_activity")
  lodging               Lodging[]              @relation("Activity_lodging")
  booking               Booking[]              @relation("Activity_booking")
  review                Review[]               @relation("Review_activity")
  location              Location[]             @relation("Activity_location")
  gallery               ActivityGallery[]      @relation("Activity_gallery")
  payment               Payment[]              @relation("Activity_payment")
  link                  String                 @unique @default("")
  image_id              String?
  image_filesize        Int?
  image_width           Int?
  image_height          Int?
  image_extension       String?
  hostBy                User?                  @relation("Activity_hostBy", fields: [hostById], references: [id])
  hostById              String?                @map("hostBy")
  createdAt             DateTime?              @default(now())

  @@index([hostById])
}

model ActivityGallery {
  id              String     @id @default(cuid())
  description     String     @default("")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  activity        Activity[] @relation("Activity_gallery")
  createdAt       DateTime?  @default(now())
}

model ActivityInclude {
  id          String     @id @default(cuid())
  name        String     @default("")
  description String     @default("")
  activity    Activity[] @relation("Activity_includes")
  createdAt   DateTime?  @default(now())
}

model ActivityWhatToDo {
  id          String     @id @default(cuid())
  name        String     @default("")
  description String     @default("")
  activity    Activity[] @relation("Activity_whatToDo")
  createdAt   DateTime?  @default(now())
}

model ActivityAvailable {
  id            String    @id @default(cuid())
  start_date    DateTime? @postgresql.Date
  end_date      DateTime? @postgresql.Date
  specific_date DateTime? @postgresql.Date
  monday        Boolean   @default(true)
  tuesday       Boolean   @default(true)
  wednesday     Boolean   @default(true)
  thursday      Boolean   @default(true)
  friday        Boolean   @default(true)
  saturday      Boolean   @default(true)
  sunday        Boolean   @default(true)
  activity      Activity? @relation("Activity_available")
  createdAt     DateTime? @default(now())
}

model ActivityAvailableDay {
  id         String    @id @default(cuid())
  day        DateTime? @postgresql.Date
  activity   Activity? @relation("ActivityAvailableDay_activity", fields: [activityId], references: [id])
  activityId String?   @map("activity")
  createdAt  DateTime? @default(now())

  @@index([activityId])
}

model Booking {
  id            String            @id @default(cuid())
  start_date    DateTime?         @postgresql.Date
  end_date      DateTime?         @postgresql.Date
  guests_adults Int?
  guests_childs Int?
  status        BookingStatusType @default(pending)
  activity      Activity[]        @relation("Activity_booking")
  lodging       Lodging?          @relation("Booking_lodging", fields: [lodgingId], references: [id])
  lodgingId     String?           @map("lodging")
  location      Location?         @relation("Booking_location", fields: [locationId], references: [id])
  locationId    String?           @map("location")
  user          User?             @relation("Booking_user", fields: [userId], references: [id])
  userId        String?           @map("user")
  payment       Payment?          @relation("Booking_payment", fields: [paymentId], references: [id])
  paymentId     String?           @unique @map("payment")
  createdAt     DateTime?         @default(now())

  @@index([lodgingId])
  @@index([locationId])
  @@index([userId])
}

model Location {
  id              String            @id @default(cuid())
  name            String            @default("")
  description     String            @default("")
  activity        Activity[]        @relation("Activity_location")
  lodging         Lodging[]         @relation("Location_lodging")
  booking         Booking[]         @relation("Booking_location")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  link            String            @unique @default("")
  gallery         LocationGallery[] @relation("Location_gallery")
  createdAt       DateTime?         @default(now())
}

model LocationGallery {
  id              String     @id @default(cuid())
  description     String     @default("")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  location        Location[] @relation("Location_gallery")
  createdAt       DateTime?  @default(now())
}

model Lodging {
  id             String           @id @default(cuid())
  name           String           @default("")
  description    String           @default("")
  price          Decimal?         @postgresql.Decimal(18, 4)
  status         String
  type           String
  address        String           @default("")
  lat            String           @default("")
  lng            String           @default("")
  hostBy         User?            @relation("Lodging_hostBy", fields: [hostById], references: [id])
  hostById       String?          @map("hostBy")
  lodgingType    LodgingType[]    @relation("LodgingType_lodging")
  activity       Activity[]       @relation("Activity_lodging")
  payment        Payment[]        @relation("Payment_lodging")
  booking        Booking[]        @relation("Booking_lodging")
  review         Review[]         @relation("Review_lodging")
  location       Location[]       @relation("Location_lodging")
  link           String           @unique @default("")
  gallery        LodgingGallery[] @relation("Lodging_gallery")
  includes       LodgingInclude[] @relation("Lodging_includes")
  logo_id        String?
  logo_filesize  Int?
  logo_width     Int?
  logo_height    Int?
  logo_extension String?
  createdAt      DateTime?        @default(now())

  @@index([hostById])
}

model LodgingType {
  id                  String    @id @default(cuid())
  type                String
  description         String    @default("")
  max_person_capacity Int?
  lodging             Lodging?  @relation("LodgingType_lodging", fields: [lodgingId], references: [id])
  lodgingId           String?   @map("lodging")
  createdAt           DateTime? @default(now())

  @@index([lodgingId])
}

model LodgingGallery {
  id              String    @id @default(cuid())
  description     String    @default("")
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  lodging         Lodging[] @relation("Lodging_gallery")
  createdAt       DateTime? @default(now())
}

model LodgingInclude {
  id          String    @id @default(cuid())
  name        String    @default("")
  description String    @default("")
  lodging     Lodging[] @relation("Lodging_includes")
  createdAt   DateTime? @default(now())
}

model Payment {
  id                      String            @id @default(cuid())
  amount                  Decimal?          @default("0.000000") @postgresql.Decimal(18, 6)
  status                  PaymentStatusType @default(pending)
  processorStripeChargeId String            @default("")
  stripeErrorMessage      String            @default("")
  processorRefundId       String            @default("")
  notes                   String            @default("")
  activity                Activity[]        @relation("Activity_payment")
  lodging                 Lodging?          @relation("Payment_lodging", fields: [lodgingId], references: [id])
  lodgingId               String?           @map("lodging")
  user                    User?             @relation("Payment_user", fields: [userId], references: [id])
  userId                  String?           @map("user")
  booking                 Booking?          @relation("Booking_payment")
  paymentMethod           PaymentMethod?    @relation("Payment_paymentMethod", fields: [paymentMethodId], references: [id])
  paymentMethodId         String?           @map("paymentMethod")
  createdAt               DateTime?         @default(now())

  @@index([lodgingId])
  @@index([userId])
  @@index([paymentMethodId])
}

model PaymentMethod {
  id                    String    @id @default(cuid())
  cardType              String    @default("")
  isDefault             Boolean   @default(false)
  lastFourDigits        String    @default("")
  expMonth              String    @default("")
  expYear               String    @default("")
  stripeProcessorId     String    @default("")
  stripePaymentMethodId String    @unique @default("")
  address               String    @default("")
  postalCode            String    @default("")
  ownerName             String    @default("")
  country               String    @default("")
  payment               Payment[] @relation("Payment_paymentMethod")
  user                  User[]    @relation("PaymentMethod_user")
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @default(now()) @updatedAt
}

model Review {
  id         String    @id @default(cuid())
  review     String    @default("")
  rating     Int?
  activity   Activity? @relation("Review_activity", fields: [activityId], references: [id])
  activityId String?   @map("activity")
  lodging    Lodging?  @relation("Review_lodging", fields: [lodgingId], references: [id])
  lodgingId  String?   @map("lodging")
  user       User?     @relation("Review_user", fields: [userId], references: [id])
  userId     String?   @map("user")
  createdAt  DateTime? @default(now())

  @@index([activityId])
  @@index([lodgingId])
  @@index([userId])
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  user      User[]    @relation("Role_user")
  createdAt DateTime? @default(now())
}

model User {
  id               String          @id @default(cuid())
  name             String          @default("")
  lastName         String          @default("")
  secondLastName   String          @default("")
  email            String          @unique @default("")
  password         String
  countryCode      String          @default("")
  phone            String          @default("")
  description      String          @default("")
  instagram        String          @default("")
  facebook         String          @default("")
  twitter          String          @default("")
  linkedin         String          @default("")
  tiktok           String          @default("")
  youtube          String          @default("")
  website          String          @default("")
  stripeCustomerId String          @default("")
  role             Role[]          @relation("Role_user")
  lodging          Lodging[]       @relation("Lodging_hostBy")
  booking          Booking[]       @relation("Booking_user")
  reviews          Review[]        @relation("Review_user")
  link             String          @unique @default("")
  status           UserStatusType  @default(initial)
  activity         Activity[]      @relation("Activity_hostBy")
  payment          Payment[]       @relation("Payment_user")
  paymentMethod    PaymentMethod[] @relation("PaymentMethod_user")
  verified         Boolean         @default(false)
  image_id         String?
  image_filesize   Int?
  image_width      Int?
  image_height     Int?
  image_extension  String?
  createdAt        DateTime?       @default(now())
}

enum BookingStatusType {
  pending
  paid
  cancelled
  confirmed
  completed
}

enum PaymentStatusType {
  pending
  processing
  succeeded
  cancelled
  failed
  refunded
}

enum UserStatusType {
  initial
  registration_done
  verified
}
